// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kv.proto

#ifndef PROTOBUF_INCLUDED_kv_2eproto
#define PROTOBUF_INCLUDED_kv_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_kv_2eproto 

namespace protobuf_kv_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_kv_2eproto
namespace RPC {
class KvGetRequest;
class KvGetRequestDefaultTypeInternal;
extern KvGetRequestDefaultTypeInternal _KvGetRequest_default_instance_;
class KvGetResponse;
class KvGetResponseDefaultTypeInternal;
extern KvGetResponseDefaultTypeInternal _KvGetResponse_default_instance_;
class KvPutRequest;
class KvPutRequestDefaultTypeInternal;
extern KvPutRequestDefaultTypeInternal _KvPutRequest_default_instance_;
class KvPutResponse;
class KvPutResponseDefaultTypeInternal;
extern KvPutResponseDefaultTypeInternal _KvPutResponse_default_instance_;
class RpcHeader;
class RpcHeaderDefaultTypeInternal;
extern RpcHeaderDefaultTypeInternal _RpcHeader_default_instance_;
class RpcMessage;
class RpcMessageDefaultTypeInternal;
extern RpcMessageDefaultTypeInternal _RpcMessage_default_instance_;
}  // namespace RPC
namespace google {
namespace protobuf {
template<> ::RPC::KvGetRequest* Arena::CreateMaybeMessage<::RPC::KvGetRequest>(Arena*);
template<> ::RPC::KvGetResponse* Arena::CreateMaybeMessage<::RPC::KvGetResponse>(Arena*);
template<> ::RPC::KvPutRequest* Arena::CreateMaybeMessage<::RPC::KvPutRequest>(Arena*);
template<> ::RPC::KvPutResponse* Arena::CreateMaybeMessage<::RPC::KvPutResponse>(Arena*);
template<> ::RPC::RpcHeader* Arena::CreateMaybeMessage<::RPC::RpcHeader>(Arena*);
template<> ::RPC::RpcMessage* Arena::CreateMaybeMessage<::RPC::RpcMessage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace RPC {

// ===================================================================

class RpcHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RPC.RpcHeader) */ {
 public:
  RpcHeader();
  virtual ~RpcHeader();

  RpcHeader(const RpcHeader& from);

  inline RpcHeader& operator=(const RpcHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RpcHeader(RpcHeader&& from) noexcept
    : RpcHeader() {
    *this = ::std::move(from);
  }

  inline RpcHeader& operator=(RpcHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcHeader* internal_default_instance() {
    return reinterpret_cast<const RpcHeader*>(
               &_RpcHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RpcHeader* other);
  friend void swap(RpcHeader& a, RpcHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RpcHeader* New() const final {
    return CreateMaybeMessage<RpcHeader>(NULL);
  }

  RpcHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RpcHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RpcHeader& from);
  void MergeFrom(const RpcHeader& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 magic_number = 1;
  void clear_magic_number();
  static const int kMagicNumberFieldNumber = 1;
  ::google::protobuf::uint32 magic_number() const;
  void set_magic_number(::google::protobuf::uint32 value);

  // uint32 version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // uint64 message_id = 3;
  void clear_message_id();
  static const int kMessageIdFieldNumber = 3;
  ::google::protobuf::uint64 message_id() const;
  void set_message_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:RPC.RpcHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 magic_number_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint64 message_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_kv_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class KvPutRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RPC.KvPutRequest) */ {
 public:
  KvPutRequest();
  virtual ~KvPutRequest();

  KvPutRequest(const KvPutRequest& from);

  inline KvPutRequest& operator=(const KvPutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KvPutRequest(KvPutRequest&& from) noexcept
    : KvPutRequest() {
    *this = ::std::move(from);
  }

  inline KvPutRequest& operator=(KvPutRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KvPutRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KvPutRequest* internal_default_instance() {
    return reinterpret_cast<const KvPutRequest*>(
               &_KvPutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(KvPutRequest* other);
  friend void swap(KvPutRequest& a, KvPutRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KvPutRequest* New() const final {
    return CreateMaybeMessage<KvPutRequest>(NULL);
  }

  KvPutRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KvPutRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const KvPutRequest& from);
  void MergeFrom(const KvPutRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvPutRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .RPC.RpcHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::RPC::RpcHeader& _internal_header() const;
  public:
  const ::RPC::RpcHeader& header() const;
  ::RPC::RpcHeader* release_header();
  ::RPC::RpcHeader* mutable_header();
  void set_allocated_header(::RPC::RpcHeader* header);

  // int32 key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  ::google::protobuf::int32 key() const;
  void set_key(::google::protobuf::int32 value);

  // uint32 vlen = 4;
  void clear_vlen();
  static const int kVlenFieldNumber = 4;
  ::google::protobuf::uint32 vlen() const;
  void set_vlen(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:RPC.KvPutRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::RPC::RpcHeader* header_;
  ::google::protobuf::int32 key_;
  ::google::protobuf::uint32 vlen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_kv_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class KvPutResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RPC.KvPutResponse) */ {
 public:
  KvPutResponse();
  virtual ~KvPutResponse();

  KvPutResponse(const KvPutResponse& from);

  inline KvPutResponse& operator=(const KvPutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KvPutResponse(KvPutResponse&& from) noexcept
    : KvPutResponse() {
    *this = ::std::move(from);
  }

  inline KvPutResponse& operator=(KvPutResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KvPutResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KvPutResponse* internal_default_instance() {
    return reinterpret_cast<const KvPutResponse*>(
               &_KvPutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(KvPutResponse* other);
  friend void swap(KvPutResponse& a, KvPutResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KvPutResponse* New() const final {
    return CreateMaybeMessage<KvPutResponse>(NULL);
  }

  KvPutResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KvPutResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const KvPutResponse& from);
  void MergeFrom(const KvPutResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvPutResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .RPC.RpcHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::RPC::RpcHeader& _internal_header() const;
  public:
  const ::RPC::RpcHeader& header() const;
  ::RPC::RpcHeader* release_header();
  ::RPC::RpcHeader* mutable_header();
  void set_allocated_header(::RPC::RpcHeader* header);

  // bool status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  bool status() const;
  void set_status(bool value);

  // @@protoc_insertion_point(class_scope:RPC.KvPutResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::RPC::RpcHeader* header_;
  bool status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_kv_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class KvGetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RPC.KvGetRequest) */ {
 public:
  KvGetRequest();
  virtual ~KvGetRequest();

  KvGetRequest(const KvGetRequest& from);

  inline KvGetRequest& operator=(const KvGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KvGetRequest(KvGetRequest&& from) noexcept
    : KvGetRequest() {
    *this = ::std::move(from);
  }

  inline KvGetRequest& operator=(KvGetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KvGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KvGetRequest* internal_default_instance() {
    return reinterpret_cast<const KvGetRequest*>(
               &_KvGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(KvGetRequest* other);
  friend void swap(KvGetRequest& a, KvGetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KvGetRequest* New() const final {
    return CreateMaybeMessage<KvGetRequest>(NULL);
  }

  KvGetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KvGetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const KvGetRequest& from);
  void MergeFrom(const KvGetRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvGetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .RPC.RpcHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::RPC::RpcHeader& _internal_header() const;
  public:
  const ::RPC::RpcHeader& header() const;
  ::RPC::RpcHeader* release_header();
  ::RPC::RpcHeader* mutable_header();
  void set_allocated_header(::RPC::RpcHeader* header);

  // int32 key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  ::google::protobuf::int32 key() const;
  void set_key(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RPC.KvGetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::RPC::RpcHeader* header_;
  ::google::protobuf::int32 key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_kv_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class KvGetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RPC.KvGetResponse) */ {
 public:
  KvGetResponse();
  virtual ~KvGetResponse();

  KvGetResponse(const KvGetResponse& from);

  inline KvGetResponse& operator=(const KvGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KvGetResponse(KvGetResponse&& from) noexcept
    : KvGetResponse() {
    *this = ::std::move(from);
  }

  inline KvGetResponse& operator=(KvGetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KvGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KvGetResponse* internal_default_instance() {
    return reinterpret_cast<const KvGetResponse*>(
               &_KvGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(KvGetResponse* other);
  friend void swap(KvGetResponse& a, KvGetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KvGetResponse* New() const final {
    return CreateMaybeMessage<KvGetResponse>(NULL);
  }

  KvGetResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KvGetResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const KvGetResponse& from);
  void MergeFrom(const KvGetResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvGetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .RPC.RpcHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::RPC::RpcHeader& _internal_header() const;
  public:
  const ::RPC::RpcHeader& header() const;
  ::RPC::RpcHeader* release_header();
  ::RPC::RpcHeader* mutable_header();
  void set_allocated_header(::RPC::RpcHeader* header);

  // bool status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  bool status() const;
  void set_status(bool value);

  // uint32 vlen = 4;
  void clear_vlen();
  static const int kVlenFieldNumber = 4;
  ::google::protobuf::uint32 vlen() const;
  void set_vlen(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:RPC.KvGetResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::RPC::RpcHeader* header_;
  bool status_;
  ::google::protobuf::uint32 vlen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_kv_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RpcMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RPC.RpcMessage) */ {
 public:
  RpcMessage();
  virtual ~RpcMessage();

  RpcMessage(const RpcMessage& from);

  inline RpcMessage& operator=(const RpcMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RpcMessage(RpcMessage&& from) noexcept
    : RpcMessage() {
    *this = ::std::move(from);
  }

  inline RpcMessage& operator=(RpcMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcMessage& default_instance();

  enum MessageTypeCase {
    kKvPutRequest = 1,
    kKvPutResponse = 2,
    kKvGetRequest = 3,
    kKvGetResponse = 4,
    MESSAGE_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcMessage* internal_default_instance() {
    return reinterpret_cast<const RpcMessage*>(
               &_RpcMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(RpcMessage* other);
  friend void swap(RpcMessage& a, RpcMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RpcMessage* New() const final {
    return CreateMaybeMessage<RpcMessage>(NULL);
  }

  RpcMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RpcMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RpcMessage& from);
  void MergeFrom(const RpcMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .RPC.KvPutRequest kv_put_request = 1;
  bool has_kv_put_request() const;
  void clear_kv_put_request();
  static const int kKvPutRequestFieldNumber = 1;
  private:
  const ::RPC::KvPutRequest& _internal_kv_put_request() const;
  public:
  const ::RPC::KvPutRequest& kv_put_request() const;
  ::RPC::KvPutRequest* release_kv_put_request();
  ::RPC::KvPutRequest* mutable_kv_put_request();
  void set_allocated_kv_put_request(::RPC::KvPutRequest* kv_put_request);

  // .RPC.KvPutResponse kv_put_response = 2;
  bool has_kv_put_response() const;
  void clear_kv_put_response();
  static const int kKvPutResponseFieldNumber = 2;
  private:
  const ::RPC::KvPutResponse& _internal_kv_put_response() const;
  public:
  const ::RPC::KvPutResponse& kv_put_response() const;
  ::RPC::KvPutResponse* release_kv_put_response();
  ::RPC::KvPutResponse* mutable_kv_put_response();
  void set_allocated_kv_put_response(::RPC::KvPutResponse* kv_put_response);

  // .RPC.KvGetRequest kv_get_request = 3;
  bool has_kv_get_request() const;
  void clear_kv_get_request();
  static const int kKvGetRequestFieldNumber = 3;
  private:
  const ::RPC::KvGetRequest& _internal_kv_get_request() const;
  public:
  const ::RPC::KvGetRequest& kv_get_request() const;
  ::RPC::KvGetRequest* release_kv_get_request();
  ::RPC::KvGetRequest* mutable_kv_get_request();
  void set_allocated_kv_get_request(::RPC::KvGetRequest* kv_get_request);

  // .RPC.KvGetResponse kv_get_response = 4;
  bool has_kv_get_response() const;
  void clear_kv_get_response();
  static const int kKvGetResponseFieldNumber = 4;
  private:
  const ::RPC::KvGetResponse& _internal_kv_get_response() const;
  public:
  const ::RPC::KvGetResponse& kv_get_response() const;
  ::RPC::KvGetResponse* release_kv_get_response();
  ::RPC::KvGetResponse* mutable_kv_get_response();
  void set_allocated_kv_get_response(::RPC::KvGetResponse* kv_get_response);

  void clear_message_type();
  MessageTypeCase message_type_case() const;
  // @@protoc_insertion_point(class_scope:RPC.RpcMessage)
 private:
  void set_has_kv_put_request();
  void set_has_kv_put_response();
  void set_has_kv_get_request();
  void set_has_kv_get_response();

  inline bool has_message_type() const;
  inline void clear_has_message_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union MessageTypeUnion {
    MessageTypeUnion() {}
    ::RPC::KvPutRequest* kv_put_request_;
    ::RPC::KvPutResponse* kv_put_response_;
    ::RPC::KvGetRequest* kv_get_request_;
    ::RPC::KvGetResponse* kv_get_response_;
  } message_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_kv_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RpcHeader

// uint32 magic_number = 1;
inline void RpcHeader::clear_magic_number() {
  magic_number_ = 0u;
}
inline ::google::protobuf::uint32 RpcHeader::magic_number() const {
  // @@protoc_insertion_point(field_get:RPC.RpcHeader.magic_number)
  return magic_number_;
}
inline void RpcHeader::set_magic_number(::google::protobuf::uint32 value) {
  
  magic_number_ = value;
  // @@protoc_insertion_point(field_set:RPC.RpcHeader.magic_number)
}

// uint32 version = 2;
inline void RpcHeader::clear_version() {
  version_ = 0u;
}
inline ::google::protobuf::uint32 RpcHeader::version() const {
  // @@protoc_insertion_point(field_get:RPC.RpcHeader.version)
  return version_;
}
inline void RpcHeader::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:RPC.RpcHeader.version)
}

// uint64 message_id = 3;
inline void RpcHeader::clear_message_id() {
  message_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RpcHeader::message_id() const {
  // @@protoc_insertion_point(field_get:RPC.RpcHeader.message_id)
  return message_id_;
}
inline void RpcHeader::set_message_id(::google::protobuf::uint64 value) {
  
  message_id_ = value;
  // @@protoc_insertion_point(field_set:RPC.RpcHeader.message_id)
}

// -------------------------------------------------------------------

// KvPutRequest

// .RPC.RpcHeader header = 1;
inline bool KvPutRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void KvPutRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::RPC::RpcHeader& KvPutRequest::_internal_header() const {
  return *header_;
}
inline const ::RPC::RpcHeader& KvPutRequest::header() const {
  const ::RPC::RpcHeader* p = header_;
  // @@protoc_insertion_point(field_get:RPC.KvPutRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::RPC::RpcHeader*>(
      &::RPC::_RpcHeader_default_instance_);
}
inline ::RPC::RpcHeader* KvPutRequest::release_header() {
  // @@protoc_insertion_point(field_release:RPC.KvPutRequest.header)
  
  ::RPC::RpcHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::RPC::RpcHeader* KvPutRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::RPC::RpcHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:RPC.KvPutRequest.header)
  return header_;
}
inline void KvPutRequest::set_allocated_header(::RPC::RpcHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:RPC.KvPutRequest.header)
}

// int32 key = 2;
inline void KvPutRequest::clear_key() {
  key_ = 0;
}
inline ::google::protobuf::int32 KvPutRequest::key() const {
  // @@protoc_insertion_point(field_get:RPC.KvPutRequest.key)
  return key_;
}
inline void KvPutRequest::set_key(::google::protobuf::int32 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:RPC.KvPutRequest.key)
}

// bytes value = 3;
inline void KvPutRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KvPutRequest::value() const {
  // @@protoc_insertion_point(field_get:RPC.KvPutRequest.value)
  return value_.GetNoArena();
}
inline void KvPutRequest::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RPC.KvPutRequest.value)
}
#if LANG_CXX11
inline void KvPutRequest::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RPC.KvPutRequest.value)
}
#endif
inline void KvPutRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RPC.KvPutRequest.value)
}
inline void KvPutRequest::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RPC.KvPutRequest.value)
}
inline ::std::string* KvPutRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:RPC.KvPutRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KvPutRequest::release_value() {
  // @@protoc_insertion_point(field_release:RPC.KvPutRequest.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KvPutRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:RPC.KvPutRequest.value)
}

// uint32 vlen = 4;
inline void KvPutRequest::clear_vlen() {
  vlen_ = 0u;
}
inline ::google::protobuf::uint32 KvPutRequest::vlen() const {
  // @@protoc_insertion_point(field_get:RPC.KvPutRequest.vlen)
  return vlen_;
}
inline void KvPutRequest::set_vlen(::google::protobuf::uint32 value) {
  
  vlen_ = value;
  // @@protoc_insertion_point(field_set:RPC.KvPutRequest.vlen)
}

// -------------------------------------------------------------------

// KvPutResponse

// .RPC.RpcHeader header = 1;
inline bool KvPutResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void KvPutResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::RPC::RpcHeader& KvPutResponse::_internal_header() const {
  return *header_;
}
inline const ::RPC::RpcHeader& KvPutResponse::header() const {
  const ::RPC::RpcHeader* p = header_;
  // @@protoc_insertion_point(field_get:RPC.KvPutResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::RPC::RpcHeader*>(
      &::RPC::_RpcHeader_default_instance_);
}
inline ::RPC::RpcHeader* KvPutResponse::release_header() {
  // @@protoc_insertion_point(field_release:RPC.KvPutResponse.header)
  
  ::RPC::RpcHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::RPC::RpcHeader* KvPutResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::RPC::RpcHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:RPC.KvPutResponse.header)
  return header_;
}
inline void KvPutResponse::set_allocated_header(::RPC::RpcHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:RPC.KvPutResponse.header)
}

// bool status = 2;
inline void KvPutResponse::clear_status() {
  status_ = false;
}
inline bool KvPutResponse::status() const {
  // @@protoc_insertion_point(field_get:RPC.KvPutResponse.status)
  return status_;
}
inline void KvPutResponse::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:RPC.KvPutResponse.status)
}

// -------------------------------------------------------------------

// KvGetRequest

// .RPC.RpcHeader header = 1;
inline bool KvGetRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void KvGetRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::RPC::RpcHeader& KvGetRequest::_internal_header() const {
  return *header_;
}
inline const ::RPC::RpcHeader& KvGetRequest::header() const {
  const ::RPC::RpcHeader* p = header_;
  // @@protoc_insertion_point(field_get:RPC.KvGetRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::RPC::RpcHeader*>(
      &::RPC::_RpcHeader_default_instance_);
}
inline ::RPC::RpcHeader* KvGetRequest::release_header() {
  // @@protoc_insertion_point(field_release:RPC.KvGetRequest.header)
  
  ::RPC::RpcHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::RPC::RpcHeader* KvGetRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::RPC::RpcHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:RPC.KvGetRequest.header)
  return header_;
}
inline void KvGetRequest::set_allocated_header(::RPC::RpcHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:RPC.KvGetRequest.header)
}

// int32 key = 2;
inline void KvGetRequest::clear_key() {
  key_ = 0;
}
inline ::google::protobuf::int32 KvGetRequest::key() const {
  // @@protoc_insertion_point(field_get:RPC.KvGetRequest.key)
  return key_;
}
inline void KvGetRequest::set_key(::google::protobuf::int32 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:RPC.KvGetRequest.key)
}

// -------------------------------------------------------------------

// KvGetResponse

// .RPC.RpcHeader header = 1;
inline bool KvGetResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void KvGetResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::RPC::RpcHeader& KvGetResponse::_internal_header() const {
  return *header_;
}
inline const ::RPC::RpcHeader& KvGetResponse::header() const {
  const ::RPC::RpcHeader* p = header_;
  // @@protoc_insertion_point(field_get:RPC.KvGetResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::RPC::RpcHeader*>(
      &::RPC::_RpcHeader_default_instance_);
}
inline ::RPC::RpcHeader* KvGetResponse::release_header() {
  // @@protoc_insertion_point(field_release:RPC.KvGetResponse.header)
  
  ::RPC::RpcHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::RPC::RpcHeader* KvGetResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::RPC::RpcHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:RPC.KvGetResponse.header)
  return header_;
}
inline void KvGetResponse::set_allocated_header(::RPC::RpcHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:RPC.KvGetResponse.header)
}

// bool status = 2;
inline void KvGetResponse::clear_status() {
  status_ = false;
}
inline bool KvGetResponse::status() const {
  // @@protoc_insertion_point(field_get:RPC.KvGetResponse.status)
  return status_;
}
inline void KvGetResponse::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:RPC.KvGetResponse.status)
}

// bytes value = 3;
inline void KvGetResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KvGetResponse::value() const {
  // @@protoc_insertion_point(field_get:RPC.KvGetResponse.value)
  return value_.GetNoArena();
}
inline void KvGetResponse::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RPC.KvGetResponse.value)
}
#if LANG_CXX11
inline void KvGetResponse::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RPC.KvGetResponse.value)
}
#endif
inline void KvGetResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RPC.KvGetResponse.value)
}
inline void KvGetResponse::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RPC.KvGetResponse.value)
}
inline ::std::string* KvGetResponse::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:RPC.KvGetResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KvGetResponse::release_value() {
  // @@protoc_insertion_point(field_release:RPC.KvGetResponse.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KvGetResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:RPC.KvGetResponse.value)
}

// uint32 vlen = 4;
inline void KvGetResponse::clear_vlen() {
  vlen_ = 0u;
}
inline ::google::protobuf::uint32 KvGetResponse::vlen() const {
  // @@protoc_insertion_point(field_get:RPC.KvGetResponse.vlen)
  return vlen_;
}
inline void KvGetResponse::set_vlen(::google::protobuf::uint32 value) {
  
  vlen_ = value;
  // @@protoc_insertion_point(field_set:RPC.KvGetResponse.vlen)
}

// -------------------------------------------------------------------

// RpcMessage

// .RPC.KvPutRequest kv_put_request = 1;
inline bool RpcMessage::has_kv_put_request() const {
  return message_type_case() == kKvPutRequest;
}
inline void RpcMessage::set_has_kv_put_request() {
  _oneof_case_[0] = kKvPutRequest;
}
inline void RpcMessage::clear_kv_put_request() {
  if (has_kv_put_request()) {
    delete message_type_.kv_put_request_;
    clear_has_message_type();
  }
}
inline const ::RPC::KvPutRequest& RpcMessage::_internal_kv_put_request() const {
  return *message_type_.kv_put_request_;
}
inline ::RPC::KvPutRequest* RpcMessage::release_kv_put_request() {
  // @@protoc_insertion_point(field_release:RPC.RpcMessage.kv_put_request)
  if (has_kv_put_request()) {
    clear_has_message_type();
      ::RPC::KvPutRequest* temp = message_type_.kv_put_request_;
    message_type_.kv_put_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::RPC::KvPutRequest& RpcMessage::kv_put_request() const {
  // @@protoc_insertion_point(field_get:RPC.RpcMessage.kv_put_request)
  return has_kv_put_request()
      ? *message_type_.kv_put_request_
      : *reinterpret_cast< ::RPC::KvPutRequest*>(&::RPC::_KvPutRequest_default_instance_);
}
inline ::RPC::KvPutRequest* RpcMessage::mutable_kv_put_request() {
  if (!has_kv_put_request()) {
    clear_message_type();
    set_has_kv_put_request();
    message_type_.kv_put_request_ = CreateMaybeMessage< ::RPC::KvPutRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:RPC.RpcMessage.kv_put_request)
  return message_type_.kv_put_request_;
}

// .RPC.KvPutResponse kv_put_response = 2;
inline bool RpcMessage::has_kv_put_response() const {
  return message_type_case() == kKvPutResponse;
}
inline void RpcMessage::set_has_kv_put_response() {
  _oneof_case_[0] = kKvPutResponse;
}
inline void RpcMessage::clear_kv_put_response() {
  if (has_kv_put_response()) {
    delete message_type_.kv_put_response_;
    clear_has_message_type();
  }
}
inline const ::RPC::KvPutResponse& RpcMessage::_internal_kv_put_response() const {
  return *message_type_.kv_put_response_;
}
inline ::RPC::KvPutResponse* RpcMessage::release_kv_put_response() {
  // @@protoc_insertion_point(field_release:RPC.RpcMessage.kv_put_response)
  if (has_kv_put_response()) {
    clear_has_message_type();
      ::RPC::KvPutResponse* temp = message_type_.kv_put_response_;
    message_type_.kv_put_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::RPC::KvPutResponse& RpcMessage::kv_put_response() const {
  // @@protoc_insertion_point(field_get:RPC.RpcMessage.kv_put_response)
  return has_kv_put_response()
      ? *message_type_.kv_put_response_
      : *reinterpret_cast< ::RPC::KvPutResponse*>(&::RPC::_KvPutResponse_default_instance_);
}
inline ::RPC::KvPutResponse* RpcMessage::mutable_kv_put_response() {
  if (!has_kv_put_response()) {
    clear_message_type();
    set_has_kv_put_response();
    message_type_.kv_put_response_ = CreateMaybeMessage< ::RPC::KvPutResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:RPC.RpcMessage.kv_put_response)
  return message_type_.kv_put_response_;
}

// .RPC.KvGetRequest kv_get_request = 3;
inline bool RpcMessage::has_kv_get_request() const {
  return message_type_case() == kKvGetRequest;
}
inline void RpcMessage::set_has_kv_get_request() {
  _oneof_case_[0] = kKvGetRequest;
}
inline void RpcMessage::clear_kv_get_request() {
  if (has_kv_get_request()) {
    delete message_type_.kv_get_request_;
    clear_has_message_type();
  }
}
inline const ::RPC::KvGetRequest& RpcMessage::_internal_kv_get_request() const {
  return *message_type_.kv_get_request_;
}
inline ::RPC::KvGetRequest* RpcMessage::release_kv_get_request() {
  // @@protoc_insertion_point(field_release:RPC.RpcMessage.kv_get_request)
  if (has_kv_get_request()) {
    clear_has_message_type();
      ::RPC::KvGetRequest* temp = message_type_.kv_get_request_;
    message_type_.kv_get_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::RPC::KvGetRequest& RpcMessage::kv_get_request() const {
  // @@protoc_insertion_point(field_get:RPC.RpcMessage.kv_get_request)
  return has_kv_get_request()
      ? *message_type_.kv_get_request_
      : *reinterpret_cast< ::RPC::KvGetRequest*>(&::RPC::_KvGetRequest_default_instance_);
}
inline ::RPC::KvGetRequest* RpcMessage::mutable_kv_get_request() {
  if (!has_kv_get_request()) {
    clear_message_type();
    set_has_kv_get_request();
    message_type_.kv_get_request_ = CreateMaybeMessage< ::RPC::KvGetRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:RPC.RpcMessage.kv_get_request)
  return message_type_.kv_get_request_;
}

// .RPC.KvGetResponse kv_get_response = 4;
inline bool RpcMessage::has_kv_get_response() const {
  return message_type_case() == kKvGetResponse;
}
inline void RpcMessage::set_has_kv_get_response() {
  _oneof_case_[0] = kKvGetResponse;
}
inline void RpcMessage::clear_kv_get_response() {
  if (has_kv_get_response()) {
    delete message_type_.kv_get_response_;
    clear_has_message_type();
  }
}
inline const ::RPC::KvGetResponse& RpcMessage::_internal_kv_get_response() const {
  return *message_type_.kv_get_response_;
}
inline ::RPC::KvGetResponse* RpcMessage::release_kv_get_response() {
  // @@protoc_insertion_point(field_release:RPC.RpcMessage.kv_get_response)
  if (has_kv_get_response()) {
    clear_has_message_type();
      ::RPC::KvGetResponse* temp = message_type_.kv_get_response_;
    message_type_.kv_get_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::RPC::KvGetResponse& RpcMessage::kv_get_response() const {
  // @@protoc_insertion_point(field_get:RPC.RpcMessage.kv_get_response)
  return has_kv_get_response()
      ? *message_type_.kv_get_response_
      : *reinterpret_cast< ::RPC::KvGetResponse*>(&::RPC::_KvGetResponse_default_instance_);
}
inline ::RPC::KvGetResponse* RpcMessage::mutable_kv_get_response() {
  if (!has_kv_get_response()) {
    clear_message_type();
    set_has_kv_get_response();
    message_type_.kv_get_response_ = CreateMaybeMessage< ::RPC::KvGetResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:RPC.RpcMessage.kv_get_response)
  return message_type_.kv_get_response_;
}

inline bool RpcMessage::has_message_type() const {
  return message_type_case() != MESSAGE_TYPE_NOT_SET;
}
inline void RpcMessage::clear_has_message_type() {
  _oneof_case_[0] = MESSAGE_TYPE_NOT_SET;
}
inline RpcMessage::MessageTypeCase RpcMessage::message_type_case() const {
  return RpcMessage::MessageTypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace RPC

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_kv_2eproto
