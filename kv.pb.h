// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kv.proto

#ifndef PROTOBUF_INCLUDED_kv_2eproto
#define PROTOBUF_INCLUDED_kv_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_kv_2eproto 

namespace protobuf_kv_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_kv_2eproto
namespace E477A1 {
class GetRequest;
class GetRequestDefaultTypeInternal;
extern GetRequestDefaultTypeInternal _GetRequest_default_instance_;
class GetResponse;
class GetResponseDefaultTypeInternal;
extern GetResponseDefaultTypeInternal _GetResponse_default_instance_;
class PutGetRequest;
class PutGetRequestDefaultTypeInternal;
extern PutGetRequestDefaultTypeInternal _PutGetRequest_default_instance_;
class PutGetResponse;
class PutGetResponseDefaultTypeInternal;
extern PutGetResponseDefaultTypeInternal _PutGetResponse_default_instance_;
class PutRequest;
class PutRequestDefaultTypeInternal;
extern PutRequestDefaultTypeInternal _PutRequest_default_instance_;
class PutResponse;
class PutResponseDefaultTypeInternal;
extern PutResponseDefaultTypeInternal _PutResponse_default_instance_;
class RPCheader;
class RPCheaderDefaultTypeInternal;
extern RPCheaderDefaultTypeInternal _RPCheader_default_instance_;
}  // namespace E477A1
namespace google {
namespace protobuf {
template<> ::E477A1::GetRequest* Arena::CreateMaybeMessage<::E477A1::GetRequest>(Arena*);
template<> ::E477A1::GetResponse* Arena::CreateMaybeMessage<::E477A1::GetResponse>(Arena*);
template<> ::E477A1::PutGetRequest* Arena::CreateMaybeMessage<::E477A1::PutGetRequest>(Arena*);
template<> ::E477A1::PutGetResponse* Arena::CreateMaybeMessage<::E477A1::PutGetResponse>(Arena*);
template<> ::E477A1::PutRequest* Arena::CreateMaybeMessage<::E477A1::PutRequest>(Arena*);
template<> ::E477A1::PutResponse* Arena::CreateMaybeMessage<::E477A1::PutResponse>(Arena*);
template<> ::E477A1::RPCheader* Arena::CreateMaybeMessage<::E477A1::RPCheader>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace E477A1 {

// ===================================================================

class RPCheader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:E477A1.RPCheader) */ {
 public:
  RPCheader();
  virtual ~RPCheader();

  RPCheader(const RPCheader& from);

  inline RPCheader& operator=(const RPCheader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPCheader(RPCheader&& from) noexcept
    : RPCheader() {
    *this = ::std::move(from);
  }

  inline RPCheader& operator=(RPCheader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCheader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPCheader* internal_default_instance() {
    return reinterpret_cast<const RPCheader*>(
               &_RPCheader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RPCheader* other);
  friend void swap(RPCheader& a, RPCheader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPCheader* New() const final {
    return CreateMaybeMessage<RPCheader>(NULL);
  }

  RPCheader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RPCheader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RPCheader& from);
  void MergeFrom(const RPCheader& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPCheader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 magic_num = 777;
  void clear_magic_num();
  static const int kMagicNumFieldNumber = 777;
  ::google::protobuf::uint32 magic_num() const;
  void set_magic_num(::google::protobuf::uint32 value);

  // uint32 version = 1;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::uint32 version() const;
  void set_version(::google::protobuf::uint32 value);

  // uint32 msg_id = 222;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 222;
  ::google::protobuf::uint32 msg_id() const;
  void set_msg_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:E477A1.RPCheader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 magic_num_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 msg_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_kv_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PutRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:E477A1.PutRequest) */ {
 public:
  PutRequest();
  virtual ~PutRequest();

  PutRequest(const PutRequest& from);

  inline PutRequest& operator=(const PutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PutRequest(PutRequest&& from) noexcept
    : PutRequest() {
    *this = ::std::move(from);
  }

  inline PutRequest& operator=(PutRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PutRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutRequest* internal_default_instance() {
    return reinterpret_cast<const PutRequest*>(
               &_PutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PutRequest* other);
  friend void swap(PutRequest& a, PutRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PutRequest* New() const final {
    return CreateMaybeMessage<PutRequest>(NULL);
  }

  PutRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PutRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PutRequest& from);
  void MergeFrom(const PutRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // int32 key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  ::google::protobuf::int32 key() const;
  void set_key(::google::protobuf::int32 value);

  // uint32 len = 3;
  void clear_len();
  static const int kLenFieldNumber = 3;
  ::google::protobuf::uint32 len() const;
  void set_len(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:E477A1.PutRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::int32 key_;
  ::google::protobuf::uint32 len_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_kv_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:E477A1.GetRequest) */ {
 public:
  GetRequest();
  virtual ~GetRequest();

  GetRequest(const GetRequest& from);

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRequest(GetRequest&& from) noexcept
    : GetRequest() {
    *this = ::std::move(from);
  }

  inline GetRequest& operator=(GetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRequest* internal_default_instance() {
    return reinterpret_cast<const GetRequest*>(
               &_GetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GetRequest* other);
  friend void swap(GetRequest& a, GetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRequest* New() const final {
    return CreateMaybeMessage<GetRequest>(NULL);
  }

  GetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetRequest& from);
  void MergeFrom(const GetRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  ::google::protobuf::int32 key() const;
  void set_key(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:E477A1.GetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 key_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_kv_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PutResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:E477A1.PutResponse) */ {
 public:
  PutResponse();
  virtual ~PutResponse();

  PutResponse(const PutResponse& from);

  inline PutResponse& operator=(const PutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PutResponse(PutResponse&& from) noexcept
    : PutResponse() {
    *this = ::std::move(from);
  }

  inline PutResponse& operator=(PutResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PutResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutResponse* internal_default_instance() {
    return reinterpret_cast<const PutResponse*>(
               &_PutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PutResponse* other);
  friend void swap(PutResponse& a, PutResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PutResponse* New() const final {
    return CreateMaybeMessage<PutResponse>(NULL);
  }

  PutResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PutResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PutResponse& from);
  void MergeFrom(const PutResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool flag = 1;
  void clear_flag();
  static const int kFlagFieldNumber = 1;
  bool flag() const;
  void set_flag(bool value);

  // @@protoc_insertion_point(class_scope:E477A1.PutResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool flag_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_kv_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:E477A1.GetResponse) */ {
 public:
  GetResponse();
  virtual ~GetResponse();

  GetResponse(const GetResponse& from);

  inline GetResponse& operator=(const GetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetResponse(GetResponse&& from) noexcept
    : GetResponse() {
    *this = ::std::move(from);
  }

  inline GetResponse& operator=(GetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetResponse* internal_default_instance() {
    return reinterpret_cast<const GetResponse*>(
               &_GetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GetResponse* other);
  friend void swap(GetResponse& a, GetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetResponse* New() const final {
    return CreateMaybeMessage<GetResponse>(NULL);
  }

  GetResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetResponse& from);
  void MergeFrom(const GetResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // bool flag = 1;
  void clear_flag();
  static const int kFlagFieldNumber = 1;
  bool flag() const;
  void set_flag(bool value);

  // uint32 len = 3;
  void clear_len();
  static const int kLenFieldNumber = 3;
  ::google::protobuf::uint32 len() const;
  void set_len(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:E477A1.GetResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  bool flag_;
  ::google::protobuf::uint32 len_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_kv_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PutGetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:E477A1.PutGetRequest) */ {
 public:
  PutGetRequest();
  virtual ~PutGetRequest();

  PutGetRequest(const PutGetRequest& from);

  inline PutGetRequest& operator=(const PutGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PutGetRequest(PutGetRequest&& from) noexcept
    : PutGetRequest() {
    *this = ::std::move(from);
  }

  inline PutGetRequest& operator=(PutGetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PutGetRequest& default_instance();

  enum RequestVariantsCase {
    kPutReq = 2,
    kGetReq = 3,
    REQUEST_VARIANTS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutGetRequest* internal_default_instance() {
    return reinterpret_cast<const PutGetRequest*>(
               &_PutGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PutGetRequest* other);
  friend void swap(PutGetRequest& a, PutGetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PutGetRequest* New() const final {
    return CreateMaybeMessage<PutGetRequest>(NULL);
  }

  PutGetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PutGetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PutGetRequest& from);
  void MergeFrom(const PutGetRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutGetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .E477A1.RPCheader rpc_header = 1;
  bool has_rpc_header() const;
  void clear_rpc_header();
  static const int kRpcHeaderFieldNumber = 1;
  private:
  const ::E477A1::RPCheader& _internal_rpc_header() const;
  public:
  const ::E477A1::RPCheader& rpc_header() const;
  ::E477A1::RPCheader* release_rpc_header();
  ::E477A1::RPCheader* mutable_rpc_header();
  void set_allocated_rpc_header(::E477A1::RPCheader* rpc_header);

  // .E477A1.PutRequest put_req = 2;
  bool has_put_req() const;
  void clear_put_req();
  static const int kPutReqFieldNumber = 2;
  private:
  const ::E477A1::PutRequest& _internal_put_req() const;
  public:
  const ::E477A1::PutRequest& put_req() const;
  ::E477A1::PutRequest* release_put_req();
  ::E477A1::PutRequest* mutable_put_req();
  void set_allocated_put_req(::E477A1::PutRequest* put_req);

  // .E477A1.GetRequest get_req = 3;
  bool has_get_req() const;
  void clear_get_req();
  static const int kGetReqFieldNumber = 3;
  private:
  const ::E477A1::GetRequest& _internal_get_req() const;
  public:
  const ::E477A1::GetRequest& get_req() const;
  ::E477A1::GetRequest* release_get_req();
  ::E477A1::GetRequest* mutable_get_req();
  void set_allocated_get_req(::E477A1::GetRequest* get_req);

  void clear_request_variants();
  RequestVariantsCase request_variants_case() const;
  // @@protoc_insertion_point(class_scope:E477A1.PutGetRequest)
 private:
  void set_has_put_req();
  void set_has_get_req();

  inline bool has_request_variants() const;
  inline void clear_has_request_variants();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::E477A1::RPCheader* rpc_header_;
  union RequestVariantsUnion {
    RequestVariantsUnion() {}
    ::E477A1::PutRequest* put_req_;
    ::E477A1::GetRequest* get_req_;
  } request_variants_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_kv_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PutGetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:E477A1.PutGetResponse) */ {
 public:
  PutGetResponse();
  virtual ~PutGetResponse();

  PutGetResponse(const PutGetResponse& from);

  inline PutGetResponse& operator=(const PutGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PutGetResponse(PutGetResponse&& from) noexcept
    : PutGetResponse() {
    *this = ::std::move(from);
  }

  inline PutGetResponse& operator=(PutGetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PutGetResponse& default_instance();

  enum ResponseVariantsCase {
    kPutRes = 2,
    kGetRes = 3,
    RESPONSE_VARIANTS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutGetResponse* internal_default_instance() {
    return reinterpret_cast<const PutGetResponse*>(
               &_PutGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(PutGetResponse* other);
  friend void swap(PutGetResponse& a, PutGetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PutGetResponse* New() const final {
    return CreateMaybeMessage<PutGetResponse>(NULL);
  }

  PutGetResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PutGetResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PutGetResponse& from);
  void MergeFrom(const PutGetResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutGetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .E477A1.RPCheader rpc_header = 1;
  bool has_rpc_header() const;
  void clear_rpc_header();
  static const int kRpcHeaderFieldNumber = 1;
  private:
  const ::E477A1::RPCheader& _internal_rpc_header() const;
  public:
  const ::E477A1::RPCheader& rpc_header() const;
  ::E477A1::RPCheader* release_rpc_header();
  ::E477A1::RPCheader* mutable_rpc_header();
  void set_allocated_rpc_header(::E477A1::RPCheader* rpc_header);

  // .E477A1.PutResponse put_res = 2;
  bool has_put_res() const;
  void clear_put_res();
  static const int kPutResFieldNumber = 2;
  private:
  const ::E477A1::PutResponse& _internal_put_res() const;
  public:
  const ::E477A1::PutResponse& put_res() const;
  ::E477A1::PutResponse* release_put_res();
  ::E477A1::PutResponse* mutable_put_res();
  void set_allocated_put_res(::E477A1::PutResponse* put_res);

  // .E477A1.GetResponse get_res = 3;
  bool has_get_res() const;
  void clear_get_res();
  static const int kGetResFieldNumber = 3;
  private:
  const ::E477A1::GetResponse& _internal_get_res() const;
  public:
  const ::E477A1::GetResponse& get_res() const;
  ::E477A1::GetResponse* release_get_res();
  ::E477A1::GetResponse* mutable_get_res();
  void set_allocated_get_res(::E477A1::GetResponse* get_res);

  void clear_response_variants();
  ResponseVariantsCase response_variants_case() const;
  // @@protoc_insertion_point(class_scope:E477A1.PutGetResponse)
 private:
  void set_has_put_res();
  void set_has_get_res();

  inline bool has_response_variants() const;
  inline void clear_has_response_variants();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::E477A1::RPCheader* rpc_header_;
  union ResponseVariantsUnion {
    ResponseVariantsUnion() {}
    ::E477A1::PutResponse* put_res_;
    ::E477A1::GetResponse* get_res_;
  } response_variants_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_kv_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RPCheader

// uint32 magic_num = 777;
inline void RPCheader::clear_magic_num() {
  magic_num_ = 0u;
}
inline ::google::protobuf::uint32 RPCheader::magic_num() const {
  // @@protoc_insertion_point(field_get:E477A1.RPCheader.magic_num)
  return magic_num_;
}
inline void RPCheader::set_magic_num(::google::protobuf::uint32 value) {
  
  magic_num_ = value;
  // @@protoc_insertion_point(field_set:E477A1.RPCheader.magic_num)
}

// uint32 msg_id = 222;
inline void RPCheader::clear_msg_id() {
  msg_id_ = 0u;
}
inline ::google::protobuf::uint32 RPCheader::msg_id() const {
  // @@protoc_insertion_point(field_get:E477A1.RPCheader.msg_id)
  return msg_id_;
}
inline void RPCheader::set_msg_id(::google::protobuf::uint32 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:E477A1.RPCheader.msg_id)
}

// uint32 version = 1;
inline void RPCheader::clear_version() {
  version_ = 0u;
}
inline ::google::protobuf::uint32 RPCheader::version() const {
  // @@protoc_insertion_point(field_get:E477A1.RPCheader.version)
  return version_;
}
inline void RPCheader::set_version(::google::protobuf::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:E477A1.RPCheader.version)
}

// -------------------------------------------------------------------

// PutRequest

// int32 key = 1;
inline void PutRequest::clear_key() {
  key_ = 0;
}
inline ::google::protobuf::int32 PutRequest::key() const {
  // @@protoc_insertion_point(field_get:E477A1.PutRequest.key)
  return key_;
}
inline void PutRequest::set_key(::google::protobuf::int32 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:E477A1.PutRequest.key)
}

// bytes value = 2;
inline void PutRequest::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PutRequest::value() const {
  // @@protoc_insertion_point(field_get:E477A1.PutRequest.value)
  return value_.GetNoArena();
}
inline void PutRequest::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:E477A1.PutRequest.value)
}
#if LANG_CXX11
inline void PutRequest::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:E477A1.PutRequest.value)
}
#endif
inline void PutRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:E477A1.PutRequest.value)
}
inline void PutRequest::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:E477A1.PutRequest.value)
}
inline ::std::string* PutRequest::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:E477A1.PutRequest.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PutRequest::release_value() {
  // @@protoc_insertion_point(field_release:E477A1.PutRequest.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PutRequest::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:E477A1.PutRequest.value)
}

// uint32 len = 3;
inline void PutRequest::clear_len() {
  len_ = 0u;
}
inline ::google::protobuf::uint32 PutRequest::len() const {
  // @@protoc_insertion_point(field_get:E477A1.PutRequest.len)
  return len_;
}
inline void PutRequest::set_len(::google::protobuf::uint32 value) {
  
  len_ = value;
  // @@protoc_insertion_point(field_set:E477A1.PutRequest.len)
}

// -------------------------------------------------------------------

// GetRequest

// int32 key = 1;
inline void GetRequest::clear_key() {
  key_ = 0;
}
inline ::google::protobuf::int32 GetRequest::key() const {
  // @@protoc_insertion_point(field_get:E477A1.GetRequest.key)
  return key_;
}
inline void GetRequest::set_key(::google::protobuf::int32 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:E477A1.GetRequest.key)
}

// -------------------------------------------------------------------

// PutResponse

// bool flag = 1;
inline void PutResponse::clear_flag() {
  flag_ = false;
}
inline bool PutResponse::flag() const {
  // @@protoc_insertion_point(field_get:E477A1.PutResponse.flag)
  return flag_;
}
inline void PutResponse::set_flag(bool value) {
  
  flag_ = value;
  // @@protoc_insertion_point(field_set:E477A1.PutResponse.flag)
}

// -------------------------------------------------------------------

// GetResponse

// bool flag = 1;
inline void GetResponse::clear_flag() {
  flag_ = false;
}
inline bool GetResponse::flag() const {
  // @@protoc_insertion_point(field_get:E477A1.GetResponse.flag)
  return flag_;
}
inline void GetResponse::set_flag(bool value) {
  
  flag_ = value;
  // @@protoc_insertion_point(field_set:E477A1.GetResponse.flag)
}

// bytes value = 2;
inline void GetResponse::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetResponse::value() const {
  // @@protoc_insertion_point(field_get:E477A1.GetResponse.value)
  return value_.GetNoArena();
}
inline void GetResponse::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:E477A1.GetResponse.value)
}
#if LANG_CXX11
inline void GetResponse::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:E477A1.GetResponse.value)
}
#endif
inline void GetResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:E477A1.GetResponse.value)
}
inline void GetResponse::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:E477A1.GetResponse.value)
}
inline ::std::string* GetResponse::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:E477A1.GetResponse.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetResponse::release_value() {
  // @@protoc_insertion_point(field_release:E477A1.GetResponse.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetResponse::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:E477A1.GetResponse.value)
}

// uint32 len = 3;
inline void GetResponse::clear_len() {
  len_ = 0u;
}
inline ::google::protobuf::uint32 GetResponse::len() const {
  // @@protoc_insertion_point(field_get:E477A1.GetResponse.len)
  return len_;
}
inline void GetResponse::set_len(::google::protobuf::uint32 value) {
  
  len_ = value;
  // @@protoc_insertion_point(field_set:E477A1.GetResponse.len)
}

// -------------------------------------------------------------------

// PutGetRequest

// .E477A1.RPCheader rpc_header = 1;
inline bool PutGetRequest::has_rpc_header() const {
  return this != internal_default_instance() && rpc_header_ != NULL;
}
inline void PutGetRequest::clear_rpc_header() {
  if (GetArenaNoVirtual() == NULL && rpc_header_ != NULL) {
    delete rpc_header_;
  }
  rpc_header_ = NULL;
}
inline const ::E477A1::RPCheader& PutGetRequest::_internal_rpc_header() const {
  return *rpc_header_;
}
inline const ::E477A1::RPCheader& PutGetRequest::rpc_header() const {
  const ::E477A1::RPCheader* p = rpc_header_;
  // @@protoc_insertion_point(field_get:E477A1.PutGetRequest.rpc_header)
  return p != NULL ? *p : *reinterpret_cast<const ::E477A1::RPCheader*>(
      &::E477A1::_RPCheader_default_instance_);
}
inline ::E477A1::RPCheader* PutGetRequest::release_rpc_header() {
  // @@protoc_insertion_point(field_release:E477A1.PutGetRequest.rpc_header)
  
  ::E477A1::RPCheader* temp = rpc_header_;
  rpc_header_ = NULL;
  return temp;
}
inline ::E477A1::RPCheader* PutGetRequest::mutable_rpc_header() {
  
  if (rpc_header_ == NULL) {
    auto* p = CreateMaybeMessage<::E477A1::RPCheader>(GetArenaNoVirtual());
    rpc_header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:E477A1.PutGetRequest.rpc_header)
  return rpc_header_;
}
inline void PutGetRequest::set_allocated_rpc_header(::E477A1::RPCheader* rpc_header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rpc_header_;
  }
  if (rpc_header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rpc_header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rpc_header, submessage_arena);
    }
    
  } else {
    
  }
  rpc_header_ = rpc_header;
  // @@protoc_insertion_point(field_set_allocated:E477A1.PutGetRequest.rpc_header)
}

// .E477A1.PutRequest put_req = 2;
inline bool PutGetRequest::has_put_req() const {
  return request_variants_case() == kPutReq;
}
inline void PutGetRequest::set_has_put_req() {
  _oneof_case_[0] = kPutReq;
}
inline void PutGetRequest::clear_put_req() {
  if (has_put_req()) {
    delete request_variants_.put_req_;
    clear_has_request_variants();
  }
}
inline const ::E477A1::PutRequest& PutGetRequest::_internal_put_req() const {
  return *request_variants_.put_req_;
}
inline ::E477A1::PutRequest* PutGetRequest::release_put_req() {
  // @@protoc_insertion_point(field_release:E477A1.PutGetRequest.put_req)
  if (has_put_req()) {
    clear_has_request_variants();
      ::E477A1::PutRequest* temp = request_variants_.put_req_;
    request_variants_.put_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::E477A1::PutRequest& PutGetRequest::put_req() const {
  // @@protoc_insertion_point(field_get:E477A1.PutGetRequest.put_req)
  return has_put_req()
      ? *request_variants_.put_req_
      : *reinterpret_cast< ::E477A1::PutRequest*>(&::E477A1::_PutRequest_default_instance_);
}
inline ::E477A1::PutRequest* PutGetRequest::mutable_put_req() {
  if (!has_put_req()) {
    clear_request_variants();
    set_has_put_req();
    request_variants_.put_req_ = CreateMaybeMessage< ::E477A1::PutRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:E477A1.PutGetRequest.put_req)
  return request_variants_.put_req_;
}

// .E477A1.GetRequest get_req = 3;
inline bool PutGetRequest::has_get_req() const {
  return request_variants_case() == kGetReq;
}
inline void PutGetRequest::set_has_get_req() {
  _oneof_case_[0] = kGetReq;
}
inline void PutGetRequest::clear_get_req() {
  if (has_get_req()) {
    delete request_variants_.get_req_;
    clear_has_request_variants();
  }
}
inline const ::E477A1::GetRequest& PutGetRequest::_internal_get_req() const {
  return *request_variants_.get_req_;
}
inline ::E477A1::GetRequest* PutGetRequest::release_get_req() {
  // @@protoc_insertion_point(field_release:E477A1.PutGetRequest.get_req)
  if (has_get_req()) {
    clear_has_request_variants();
      ::E477A1::GetRequest* temp = request_variants_.get_req_;
    request_variants_.get_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::E477A1::GetRequest& PutGetRequest::get_req() const {
  // @@protoc_insertion_point(field_get:E477A1.PutGetRequest.get_req)
  return has_get_req()
      ? *request_variants_.get_req_
      : *reinterpret_cast< ::E477A1::GetRequest*>(&::E477A1::_GetRequest_default_instance_);
}
inline ::E477A1::GetRequest* PutGetRequest::mutable_get_req() {
  if (!has_get_req()) {
    clear_request_variants();
    set_has_get_req();
    request_variants_.get_req_ = CreateMaybeMessage< ::E477A1::GetRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:E477A1.PutGetRequest.get_req)
  return request_variants_.get_req_;
}

inline bool PutGetRequest::has_request_variants() const {
  return request_variants_case() != REQUEST_VARIANTS_NOT_SET;
}
inline void PutGetRequest::clear_has_request_variants() {
  _oneof_case_[0] = REQUEST_VARIANTS_NOT_SET;
}
inline PutGetRequest::RequestVariantsCase PutGetRequest::request_variants_case() const {
  return PutGetRequest::RequestVariantsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PutGetResponse

// .E477A1.RPCheader rpc_header = 1;
inline bool PutGetResponse::has_rpc_header() const {
  return this != internal_default_instance() && rpc_header_ != NULL;
}
inline void PutGetResponse::clear_rpc_header() {
  if (GetArenaNoVirtual() == NULL && rpc_header_ != NULL) {
    delete rpc_header_;
  }
  rpc_header_ = NULL;
}
inline const ::E477A1::RPCheader& PutGetResponse::_internal_rpc_header() const {
  return *rpc_header_;
}
inline const ::E477A1::RPCheader& PutGetResponse::rpc_header() const {
  const ::E477A1::RPCheader* p = rpc_header_;
  // @@protoc_insertion_point(field_get:E477A1.PutGetResponse.rpc_header)
  return p != NULL ? *p : *reinterpret_cast<const ::E477A1::RPCheader*>(
      &::E477A1::_RPCheader_default_instance_);
}
inline ::E477A1::RPCheader* PutGetResponse::release_rpc_header() {
  // @@protoc_insertion_point(field_release:E477A1.PutGetResponse.rpc_header)
  
  ::E477A1::RPCheader* temp = rpc_header_;
  rpc_header_ = NULL;
  return temp;
}
inline ::E477A1::RPCheader* PutGetResponse::mutable_rpc_header() {
  
  if (rpc_header_ == NULL) {
    auto* p = CreateMaybeMessage<::E477A1::RPCheader>(GetArenaNoVirtual());
    rpc_header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:E477A1.PutGetResponse.rpc_header)
  return rpc_header_;
}
inline void PutGetResponse::set_allocated_rpc_header(::E477A1::RPCheader* rpc_header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rpc_header_;
  }
  if (rpc_header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rpc_header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rpc_header, submessage_arena);
    }
    
  } else {
    
  }
  rpc_header_ = rpc_header;
  // @@protoc_insertion_point(field_set_allocated:E477A1.PutGetResponse.rpc_header)
}

// .E477A1.PutResponse put_res = 2;
inline bool PutGetResponse::has_put_res() const {
  return response_variants_case() == kPutRes;
}
inline void PutGetResponse::set_has_put_res() {
  _oneof_case_[0] = kPutRes;
}
inline void PutGetResponse::clear_put_res() {
  if (has_put_res()) {
    delete response_variants_.put_res_;
    clear_has_response_variants();
  }
}
inline const ::E477A1::PutResponse& PutGetResponse::_internal_put_res() const {
  return *response_variants_.put_res_;
}
inline ::E477A1::PutResponse* PutGetResponse::release_put_res() {
  // @@protoc_insertion_point(field_release:E477A1.PutGetResponse.put_res)
  if (has_put_res()) {
    clear_has_response_variants();
      ::E477A1::PutResponse* temp = response_variants_.put_res_;
    response_variants_.put_res_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::E477A1::PutResponse& PutGetResponse::put_res() const {
  // @@protoc_insertion_point(field_get:E477A1.PutGetResponse.put_res)
  return has_put_res()
      ? *response_variants_.put_res_
      : *reinterpret_cast< ::E477A1::PutResponse*>(&::E477A1::_PutResponse_default_instance_);
}
inline ::E477A1::PutResponse* PutGetResponse::mutable_put_res() {
  if (!has_put_res()) {
    clear_response_variants();
    set_has_put_res();
    response_variants_.put_res_ = CreateMaybeMessage< ::E477A1::PutResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:E477A1.PutGetResponse.put_res)
  return response_variants_.put_res_;
}

// .E477A1.GetResponse get_res = 3;
inline bool PutGetResponse::has_get_res() const {
  return response_variants_case() == kGetRes;
}
inline void PutGetResponse::set_has_get_res() {
  _oneof_case_[0] = kGetRes;
}
inline void PutGetResponse::clear_get_res() {
  if (has_get_res()) {
    delete response_variants_.get_res_;
    clear_has_response_variants();
  }
}
inline const ::E477A1::GetResponse& PutGetResponse::_internal_get_res() const {
  return *response_variants_.get_res_;
}
inline ::E477A1::GetResponse* PutGetResponse::release_get_res() {
  // @@protoc_insertion_point(field_release:E477A1.PutGetResponse.get_res)
  if (has_get_res()) {
    clear_has_response_variants();
      ::E477A1::GetResponse* temp = response_variants_.get_res_;
    response_variants_.get_res_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::E477A1::GetResponse& PutGetResponse::get_res() const {
  // @@protoc_insertion_point(field_get:E477A1.PutGetResponse.get_res)
  return has_get_res()
      ? *response_variants_.get_res_
      : *reinterpret_cast< ::E477A1::GetResponse*>(&::E477A1::_GetResponse_default_instance_);
}
inline ::E477A1::GetResponse* PutGetResponse::mutable_get_res() {
  if (!has_get_res()) {
    clear_response_variants();
    set_has_get_res();
    response_variants_.get_res_ = CreateMaybeMessage< ::E477A1::GetResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:E477A1.PutGetResponse.get_res)
  return response_variants_.get_res_;
}

inline bool PutGetResponse::has_response_variants() const {
  return response_variants_case() != RESPONSE_VARIANTS_NOT_SET;
}
inline void PutGetResponse::clear_has_response_variants() {
  _oneof_case_[0] = RESPONSE_VARIANTS_NOT_SET;
}
inline PutGetResponse::ResponseVariantsCase PutGetResponse::response_variants_case() const {
  return PutGetResponse::ResponseVariantsCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace E477A1

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_kv_2eproto
